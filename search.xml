<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[基础CSS]]></title>
    <url>%2F2018%2F12%2F18%2Fcss%2F</url>
    <content type="text"><![CDATA[CSS css选择器： 字体 背景 背景位置 背景滚动 文本 文本下划线 首行缩进 文本换行 边框 外边距 内边距 定位 block、inline、inline-block css选择器：标签选择器：html标签选择， 123span&#123; &#125; id选择器： 123#id&#123; &#125; class类选择器： 123.class&#123; &#125; 关联选择器： 123.class h1&#123; color:red;&#125; 伪元素选择器：（ie） 123456a:link&#123; color:red; font-size:2em&#125; //默认 active点击 visited点击完 hove 组合选择器：多个选择器逗号连接一起使用 字体1234font-famliy:字体名; //字体样式 font-size:20px; //字体大小color:red; //颜色font-weight:bold; //字体粗细 123456normal：正常的字体。相当于数字值400bold：粗体。相当于数字值700。bolder：定义比继承值更重的值lighter：定义比继承值更轻的值用数字表示文本字体粗细。 取值范围：100 | 200 | 300 | 400 | 500 | 600 | 700 | 800 | 900 123456font-size:normal; normal：指定文本字体样式为正常的字体italic：指定文本字体样式为斜体。 对于没有设计斜体的特殊字体，如果要使用斜体外观将应用obliqueoblique：指定文本字体样式为倾斜的字体。 人为的使文字倾斜，而不是去选取字体中的斜体字 背景body、h1、p等标签本身含有边距，用全局清除页边距 1*&#123;margin:0px;padding:0px&#125; 背景色\背景图 12345backgroung-color:red;background-image:url(&apos;图片路径&apos;); //none：无背景图。//当同时定义了背景颜色和背景图像时，背景图像覆盖在背景颜色之上。background-repeat:repeat; //是否平铺background-position:left top; 多组背景图，且背景图之间有重叠，写在前面的将会盖在写在后面的图像之上 背景位置一个参数时用于横向和纵向 如果提供全部2个参数，第1个用于横向，第二个用于纵向 123456repeat-x：背景图像在横向上平铺repeat-y：背景图像在纵向上平铺repeat：背景图像在横向和纵向平铺no-repeat：背景图像不平铺（不平埔时其他区域用背景色填充）round：背景图像自动缩放直到适应且填充满整个容器。（CSS3）space：背景图像以相同的间距平铺且填充满整个容器或某个方向。（CSS3） 123456background-position:left top; （左上角为0，0），所以位置上移时为负值该属性提供2个参数值（CSS3中已允许提供3，4个值）。设置3个或4个值，偏移量前必须有关键字如果提供两个，第一个用于横坐标，第二个用于纵坐标如果只提供一个，该值将用于横坐标；纵坐标将默认为50%（即center）。 123456789- 背景图像在容器中右下方，并且距离右边和底部各有20pxbackground:url(test1.jpg) no-repeat right 20px bottom 20px;enter：背景图像横向和纵向居中。left：背景图像在横向上填充从左边开始。right：背景图像在横向上填充从右边开始。top：背景图像在纵向上填充从顶部开始。bottom：背景图像在纵向上填充从底部开始。 背景滚动12345678910background-attachment:scroll;设置或检索背景图像是随对象内容滚动还是固定的。必须先指定 background-image 属性。fixed：背景图像相对于窗体固定。scroll：背景图像相对于元素固定， 当元素内容滚动时背景图像不会跟着滚动，但会随元素的祖先元素或窗体一起滚动。local： 背景图像相对于元素内容固定， 当元素随元素滚动时背景图像也会跟着滚动，因为背景图像总是要跟着内容。（CSS3） 文本文本下划线12text-decoration:none;(文本装饰的种类，如a标签去除下划线) none | underline | overline | line-through | blink（带闪烁文字） 文本位置 12345text-align:start;left：内容左对齐。center：内容居中对齐。right：内容右对齐 文字在容器中因为容器高度只使用text-align无法居中时使用line-height将文字所在位置高度设置为容器高度行高，设置文字居中 设置对象的行高。 即字体最底端与字体内部顶端之间的距离 12line-height:normal;line-height:20px; 首行缩进123456text-index:0px; length：用长度值指定文本的缩进。可以为负值。 each-line： 定义缩进作用在块容器的第一行或者内部的每个强制换行的首行，软换行不受影响。（CSS3） hanging： 反向所有被缩进作用的行。（CSS3） 文本换行1234567word-break：normal；（碰到容器边界进行折行）normal：依照亚洲语言和非亚洲语言的文本规则，允许在字内换行。keep-all： 与所有非亚洲语言的normal相同。对于中文，韩文，日文，不允许字断开。适合包含少量亚洲文本的非亚洲文本。break-all： 该行为与亚洲语言的normal相同。也允许非亚洲语言文本行的任意字内断开。该值适合包含一些非亚洲文本的亚洲文本，比如使连续的英文字母间断行 光标 12cursor:auto; help | pointer | wait 边框123border:2px solid red;border：&lt;line-width&gt; || &lt;line-style&gt; || &lt;color&gt; &lt;line-style&gt;= none | hidden | dotted | dashed | solid | double | inset | outset 列表 123456789101112list-style：&lt; list-style-type &gt; || &lt; list-style-position&gt; || &lt; list-style-image &gt;&lt;list-style-type&gt;：设置或检索对象的列表项所使用的预设标记 默认值：disc disc：实心圆 circle：空心圆 square：实心方块 decimal：阿拉伯数字 none：不使用项目符号&lt;list-style-position&gt;：设置或检索作为对象的列表项标记如何根据文本排列 默认值：outside inside&lt;list-style-image&gt;：设置或检索作为对象的列表项标记的图像 文本域 ​ textarea标签 设置文本框不可拖动 resize:none; 表格 12345678910111213141516border-collapse：separate； 设置表格的行和单元格的边是合并还是独立 separate：边框独立 collapse：相邻边被合并border-spacing：0； 设置当表格边框独立时，行和单元格的边框在横向和纵向上的间距 该属性作用等同于标签属性cellspacing(单元格边距)。border-spacing:0等同于cellspacing=&quot;0&quot; 只有当表格边框独立（即border-collapse:separate）此属性才起作用empty-cells:show; hide：指定当表格的单元格无内容时，隐藏该单元格的边框。 show：指定当表格的单元格无内容时，显示该单元格的边框 只有当表格边框独立（即border-collapse:separate）此属性才起作用 外边距1margin 设置对象四边的外延边距。 如果提供全部四个参数值，将按上、右、下、左的顺序作用于四边。 如果只提供一个，将用于全部的四边。 如果提供两个，第一个用于上、下，第二个用于左、右。 如果提供三个，第一个用于上，第二个用于左、右，第三个用于下。 非替代(non-Replaced)行内元素可以使用该属性设置左、右两边的外补丁；若要设置上、下两边的外补丁，必须先使该对象表现为块级或内联块级。 外延边距始终透明。 内边距1padding 使用padding会增加块的宽高，所以在使用padding时对应的将块的宽高进行增减 设置对象四边的内部边距。 如果提供全部四个参数值，将按上、右、下、左的顺序作用于四边。 如果只提供一个，将用于全部的四边。 如果提供两个，第一个用于上、下，第二个用于左、右。 如果提供三个，第一个用于上，第二个用于左、右，第三个用于下。 定位1position：static static：对象遵循常规流。此时4个定位偏移属性不会被应用。 absolute： 对象脱离常规流，此时偏移属性参照的是离自身最近的定位祖先元素，如果没有定位的祖先元素，则一直回溯到body元素。盒子的偏移位置不影响常规流中的任何元素，其margin不与其他任何margin折叠。 relative： 对象遵循常规流，并且参照自身在常规流中的位置通过top，right，bottom，left这4个定位偏移属性进行偏移时不会影响常规流中的任何元素。 相对上级元素的位置进行定位 fixed：与absolute一致，但偏移定位是以窗口为参考。当出现滚动条时，对象不会随着滚动。 z-index: auto auto：元素在当前层叠上下文中的层叠级别是0 ​ 用整数值来定义堆叠级别。可以为负值。 设置对象的层叠顺序。 z-index用于确定元素在当前层叠上下文中的层叠级别，并确定该元素是否创建新的局部层叠上下文。 同一个层叠上下文中，层叠级别大的显示在上面，反之显示在下面。 block、inline、inline-blockblock-level elements (块级元素) 和 inline elements (内联元素) block 使元素变成块级元素，独占一行，在不设置自己的宽度的情况下，块级元素会默认填满父级元素的宽度 能够改变元素的height，width的值 可以设置padding，margin的各个属性值，top，left，bottom，right都能够产生边距效果 常见的块级元素有 div, form, table, p, pre, h1~h6, dl, ol, ul 等 inline 使元素变成行内元素，拥有行内元素的特性，即可以与其他行内元素共享一行，不会独占一行 元素前后不会产生换行，一系列inline元素都在一行内显示，直到该行排满 不能更改元素的height，width的值，大小由内容撑开 可以使用padding，margin的left和right产生边距效果，但是top和bottom就不行 常见的内联元素有 span, a, stong, en, label, input, select, textarea, img, br 等 inline-block:不独占一行的块级元素 使元素变成行内元素，拥有行内元素的特性，即可以与其他行内元素共享一行，不会独占一行 能够改变元素的height，width的值 可以设置padding，margin的各个属性值，top，left，bottom，right都能够产生边距效果 block元素可以包含block元素和inline元素；但inline元素只能包含inline元素。]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[flex]]></title>
    <url>%2F2018%2F12%2F14%2Fflex%2F</url>
    <content type="text"><![CDATA[flex布局 弹性盒子 方向： 子元素水平排列： 子元素垂直排列： 单行 多行 子元素是否换行： 子元素属性： 盒子模型；box-sizng 正常增加div默认为content-box (box-sizing:content-box) 改变padding、border等属性时，盒子向外扩展，盒子会变大 box-sizing:border-box ​ 改变padding、border等属性时，盒子向内扩展，盒子不会变大 弹性盒子在父级元素添加 display:flex; (浏览器兼容display:-webkit-flex;) 如果用了弹性布局，子元素不需要float、clear等父级flex的其他属性 方向：flex-direction:row; 1234row 横向row-reverse 横向反转，对齐方式也会进行反转column 纵向column-reverse 纵向反转，对齐方式也会进行反转 子元素水平排列：jusitfy-content:flex-start; 12345flex-start 居左flex-end 居右center 居中space-between 两端对齐，平均分布space-around 子元素均匀分布，等距分布 在父级元素中进行方向反转后，若需要再次按照原来方想对齐则需要将子元素排列方法也反转 1234flex-direction:row;jusitfy-content:flex-start;flex-direction:row-reverse;jusitfy-content:flex-end; 子元素垂直排列：定义子元素在交叉轴上如何对齐 flex-direction设置的主轴，默认为row（水平）在主轴方向居中 单行align-items:flex-start; 12345stretch 拉伸（父级有高度时默认值，相当于不加；父级没有宽度或者高度会拉伸填充）flex-start 居顶flex-end 居底center 居中baseline 将子元素中文字基线(底部)对齐，以第一个子元素中文字基线为标准 多行align-content:stretch; 1234stretch 拉伸（默认值，相当于不加）flex-start 居左flex-end 居右center 居中 子元素排列方向： flex-direction:row; row 横向 row-reverse 横向反转 column 纵向 column-reverse 纵向反转 //ps:将元素方向改为column纵向时再使元素居中需要垂直水平都居中 flex-direction:column; align-items:center; jusitfy-content:center; 子元素是否换行：​ flex-wrap:no-wrap; 12nowrap 不换行wrap 换行 组合写 12flex-flow：&lt;&apos; flex-direction &apos;&gt; || &lt;&apos; flex-wrap &apos;&gt;flex-flow:column nowrap; 子元素属性：flex 系数，数字复合属性。设置或检索弹性盒模型对象的子元素如何分配空间。 如果缩写「flex: 1」, 则其计算值为「1 1 0%」 如果缩写「flex: auto」, 则其计算值为「1 1 auto」 如果「flex: none」, 则其计算值为「0 0 auto」 如果「flex: 0 auto」或者「flex: initial」, 则其计算值为「0 1 auto」，即「flex」初始值 子元素在划分父元素宽度，先去除固定宽度 弹性盒子布局定位需要在弹性盒子外包裹一层，然后对外边不是弹性盒子的块进行定位 flex-grow： 设置弹性盒的扩展比率。 根据弹性盒子元素所设置的扩展因子作为比率来分配剩余空间。 align-self：auto； 单独设置子元素y轴对齐方式 stretch 拉伸 flex-start 居左 flex-end 居右 center 居中 order ​ 设置或检索弹性盒模型对象的子元素出现的顺序。 ​ order定义将会影响 &lt;’ position ‘&gt; 值为static元素的层叠级别， ​ 数值小的会被数值大的盖住。]]></content>
      <categories>
        <category>notes</category>
      </categories>
      <tags>
        <tag>flex</tag>
        <tag>css</tag>
        <tag>小程序</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[GitHub搭建个人博客-基本搭建]]></title>
    <url>%2F2018%2F08%2F20%2FGitHub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2-%E5%9F%BA%E6%9C%AC%E6%90%AD%E5%BB%BA%2F</url>
    <content type="text"><![CDATA[GitHub搭建个人博客-基本搭建 一、基本搭建 1、搭建环境 2、Github新建项目 3、安装hexo 4、将hexo部署到GitHub 5、新间文章并部署 一、基本搭建1、搭建环境需要先安装node.js和node.js环境（安装一直下一步即可）检测是否安装成功：在命令行（cmd或者git bash）输入下列命令 1node -v npm -v 显示 node.js npm的版本即为成功安装 git 2、Github新建项目在自己的GitHub上新建仓库 仓库名：账户名.github.io ps:必须使用自己GitHub账户名，不然会访问不到类型公开勾选 Initialize this repository with a README保存点击右侧setting下拉找到GitHub pages 找到所创建的项目的访问网址 1http://账户名.github.io 3、安装hexo在自己电脑合适的位置安装即可（打开git） 1npm install hexo -g 检查是否安装成功 1hexo -v 初始化安装hexo的文件夹1hexo init 最后显示“Start blogging with Hexo！”即为成功安装所需组件 1npm install 使用 Hexo 生成静态文件 12hexo generatehexo g 启动hexo 1hexo s 开启后窗口会显示一个本地网址，复制粘贴到浏览器即可访问 http://localhost:4000 4、将hexo部署到GitHub 配置git 12git config --global user.email &quot;you email&quot;git config --global user.name &quot;you name&quot; 2、生成密匙 1ssh-keygen -t rsa -C “you email” 连续三个回车，生成密钥，最后得到了两个文件： id_rsa和id_rsa.pub 默认存储路径 C:\用户\电脑用户名.ssh 继续输入1eval &quot;$(ssh-agent -s)&quot; 添加密钥到ssh-agent，显示 Agent pid ***再输入1ssh-add ~/.ssh/id_rsa 添加生成的SSH key到ssh-agent 3、GitHub 添加ssh在之前创建的项目中点击右侧setting –&gt; 选择左侧栏 Deploy keys –&gt;Add deploy key 将 C:\用户\电脑用户名.ssh 中id_rsa.pub文件里的内容复制 测试添加 ssh 是否成功 1ssh -T git@github.com 运行后看到你自己的用户名即为成功 4、配置 hexo在hexo安装目录找到 _config.yml 搜索deploy，设置如下： 1234deploy: type: git repository: 项目ssh链接 branch: master 项目ssh链接来自GitHub项目 Clone and download 安装扩展 1npm install hexo-deployer-git --save 5、新间文章并部署创建文章 1hexo new post “文章名” 在hexo\source_posts可以找到创建的文件 ####分类、标签Hexo 中两者有着明显的差别：1、分类具有顺序性和层次性，也就是说 Foo, Bar 不等于 Bar, Foo1234categories: - Diary - Life 会使分类`Life`成为`Diary`的子分类，而不是并列分类。 分类创建12345678hexo new page categories#编辑分类 hexo/source/categories/index.md---title: categoriesdate: 2018-08-20 14:34:17type: categories--- 2、标签没有顺序和层次。123456789hexo new page tags#编辑标签 hexo/source/tags/index.md---title: tagsdate: 2018-08-20 14:35:06type: tags--- 创建标签123tags: - PS3 - Games 生成+部署 12$ hexo g -d$ hexo d -g 访问你的地址：http://用户名.github.io;可以看到生成的文章参考链接：https://www.cnblogs.com/fengxiongZz/p/7707219.html]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>github</tag>
        <tag>node.js</tag>
      </tags>
  </entry>
</search>
